<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard 2025</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>
    <script src="https://d3js.org/d3-geo.v2.min.js"></script>
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3a0ca3;
            --background-color: #f8f9fa;
            --card-bg: #ffffff;
            --text-color: #333333;
            --border-radius: 12px;
            --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            padding: 20px;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
        }

        h1 {
            font-size: 2.5rem;
            color: var(--secondary-color);
            margin-bottom: 10px;
        }

        .filters {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 30px;
            justify-content: center;
        }

        .filter-item {
            background-color: var(--card-bg);
            padding: 10px 15px;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
        }

        select, input {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
        }

        .dashboard-row {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 30px;
            justify-content: center;
        }

        .chart-container {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
            flex: 1;
            min-width: 300px;
        }

        .map-container {
            width: 100%;
            height: 500px;
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
        }

        .chart-title {
            margin-bottom: 15px;
            font-size: 1.2rem;
            color: var(--secondary-color);
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .chart-container {
                min-width: 100%;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>Dashboard 2025</h1>
    </header>

    <div class="filters">
        <div class="filter-item">
            <label for="year-filter">Année :</label>
            <select id="year-filter">
                <option value="all">Toutes les années</option>
                <option value="2024">2024</option>
                <option value="2023">2023</option>
                <option value="2022">2022</option>
                <!-- Autres années -->
            </select>
        </div>
        <div class="filter-item">
            <label for="product-filter">Produit :</label>
            <select id="product-filter">
                <option value="all">Tous les produits</option>
                <option value="product1">Produit 1</option>
                <option value="product2">Produit 2</option>
                <option value="product3">Produit 3</option>
            </select>
        </div>
        <div class="filter-item">
            <label for="region-filter">Région :</label>
            <select id="region-filter">
                <option value="all">Toutes les régions</option>
                <option value="ile-de-france">Île-de-France</option>
                <option value="pays-de-la-loire">Pays de la Loire</option>
                <!-- Autres régions -->
            </select>
        </div>
    </div>

    <div class="dashboard-row">
        <div class="chart-container">
            <h3 class="chart-title">Répartition par catégorie (4)</h3>
            <canvas id="pieChart1"></canvas>
        </div>
        <div class="chart-container">
            <h3 class="chart-title">Répartition par catégorie (10)</h3>
            <canvas id="pieChart2"></canvas>
        </div>
        <div class="chart-container">
            <h3 class="chart-title">Répartition par catégorie (21)</h3>
            <canvas id="pieChart3"></canvas>
        </div>
    </div>

    <div class="dashboard-row">
        <div class="chart-container" style="flex: 1 1 100%;">
            <h3 class="chart-title">Évolution du nombre de souscripteurs (2014-2024)</h3>
            <canvas id="lineChart"></canvas>
        </div>
    </div>

    <div class="dashboard-row">
        <div class="map-container">
            <h3 class="chart-title">Répartition des souscripteurs par département</h3>
            <div id="map"></div>
        </div>
    </div>

    <script>
        // Données simulées
        const getRandomData = (count) => {
            return Array.from({length: count}, () => Math.floor(Math.random() * 100));
        };
        
        const getRandomLabels = (count, prefix) => {
            return Array.from({length: count}, (_, i) => `${prefix} ${i+1}`);
        };

        // Données pour les camemberts
        const pieData1 = {
            labels: getRandomLabels(4, 'Catégorie'),
            data: getRandomData(4)
        };
        
        const pieData2 = {
            labels: getRandomLabels(10, 'Catégorie'),
            data: getRandomData(10)
        };
        
        const pieData3 = {
            labels: getRandomLabels(21, 'Catégorie'),
            data: getRandomData(21)
        };

        // Données pour le graphique en ligne
        const years = Array.from({length: 11}, (_, i) => 2014 + i);
        const lineData = {
            labels: years,
            data: years.map(() => Math.floor(Math.random() * 1000) + 500)
        };

        // Création des graphiques avec Chart.js
        const createPieChart = (elementId, data, labels) => {
            const ctx = document.getElementById(elementId).getContext('2d');
            return new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: [
                            '#4361ee', '#3a0ca3', '#7209b7', '#f72585',
                            '#4cc9f0', '#4895ef', '#560bad', '#480ca8',
                            '#3f37c9', '#4361ee', '#4cc9f0', '#00b4d8',
                            '#0096c7', '#0077b6', '#023e8a', '#03045e',
                            '#d00000', '#dc2f02', '#e85d04', '#f48c06', '#faa307'
                        ].slice(0, data.length),
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                boxWidth: 15,
                                padding: 15
                            }
                        }
                    }
                }
            });
        };

        const createLineChart = (elementId, labels, data) => {
            const ctx = document.getElementById(elementId).getContext('2d');
            return new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Nombre de souscripteurs',
                        data: data,
                        borderColor: '#4361ee',
                        backgroundColor: 'rgba(67, 97, 238, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: true
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        };

        // Initialisation des graphiques
        const pieChart1 = createPieChart('pieChart1', pieData1.data, pieData1.labels);
        const pieChart2 = createPieChart('pieChart2', pieData2.data, pieData2.labels);
        const pieChart3 = createPieChart('pieChart3', pieData3.data, pieData3.labels);
        const lineChart = createLineChart('lineChart', lineData.labels, lineData.data);

        // Carte de France avec D3.js
        const createFranceMap = async () => {
            // Dimensions de la carte
            const width = document.getElementById('map').clientWidth;
            const height = 500;
            
            // Création du SVG
            const svg = d3.select("#map")
                .append("svg")
                .attr("width", width)
                .attr("height", height);
                
            // Configuration de la projection
            const projection = d3.geoMercator()
                .center([2.5, 46.5]) // Centré sur la France
                .scale(width * 3)
                .translate([width / 2, height / 2]);
                
            // Création du générateur de chemins
            const path = d3.geoPath().projection(projection);
            
            try {
                // Chargement des données géographiques de la France
                // Note: Dans un vrai projet, vous auriez besoin d'un fichier GeoJSON des départements français
                // Pour l'exemple, nous allons simuler cela
                
                // Simulons des données par département
                const departmentData = {
                    "75": { name: "Paris", value: 950 },
                    "44": { name: "Loire-Atlantique", value: 350 },
                    // Autres départements...
                };
                
                // Créer une échelle de couleur
                const colorScale = d3.scaleLinear()
                    .domain([0, 1000])
                    .range(["#4cc9f0", "#f72585"]);
                
                // Affichage d'un placeholder pour la démonstration
                svg.append("text")
                    .attr("x", width / 2)
                    .attr("y", height / 2)
                    .attr("text-anchor", "middle")
                    .text("Carte de France par départements")
                    .style("font-size", "20px");
                
                svg.append("text")
                    .attr("x", width / 2)
                    .attr("y", height / 2 + 30)
                    .attr("text-anchor", "middle")
                    .text("(Dans l'implémentation réelle, chargez un fichier GeoJSON des départements français)")
                    .style("font-size", "14px");
                    
            } catch (error) {
                console.error("Erreur lors du chargement de la carte:", error);
            }
        };

        // Initialisation de la carte
        createFranceMap();

        // Gestion des filtres
        document.getElementById('year-filter').addEventListener('change', updateDashboard);
        document.getElementById('product-filter').addEventListener('change', updateDashboard);
        document.getElementById('region-filter').addEventListener('change', updateDashboard);

        function updateDashboard() {
            const yearFilter = document.getElementById('year-filter').value;
            const productFilter = document.getElementById('product-filter').value;
            const regionFilter = document.getElementById('region-filter').value;
            
            console.log(`Filtres appliqués: Année=${yearFilter}, Produit=${productFilter}, Région=${regionFilter}`);
            
            // Ici, vous implémenteriez la logique pour mettre à jour les graphiques
            // en fonction des filtres sélectionnés
            // Par exemple:
            // 1. Requête à l'API pour obtenir de nouvelles données
            // 2. Mise à jour des graphiques avec ces données
            
            // Pour cet exemple, on simule juste une mise à jour avec des données aléatoires
            
            // Mise à jour des camemberts
            pieChart1.data.datasets[0].data = getRandomData(4);
            pieChart1.update();
            
            pieChart2.data.datasets[0].data = getRandomData(10);
            pieChart2.update();
            
            pieChart3.data.datasets[0].data = getRandomData(21);
            pieChart3.update();
            
            // Mise à jour du graphique en ligne
            lineChart.data.datasets[0].data = years.map(() => Math.floor(Math.random() * 1000) + 500);
            lineChart.update();
            
            // La mise à jour de la carte nécessiterait également une logique spécifique
        }
    </script>
</body>
</html>
